const NODE_FS = require('fs')
const PLUGIN_LIST = [
    [ 'vue', '前端框架工具' ],
    [ 'vuex', 'vue的状态管理模式' ],
    [ 'vue-router', 'vue路由管理器' ],
    [ 'webpack', '模块打包器' ],
    [ 'webpack-cli', 'webpack脚手架' ],
    [ 'webpack-dev-server', '本地运行环境搭建工具' ],
    [ 'stylelint-loader', 'webpack的stylelint过滤器' ],
    [ 'babel-loader', 'webpack的babel过滤器' ],
    [ 'vue-loader', 'webpack的vue过滤器' ],
    [ 'vue-md-loader', 'webpack的将md转换为vue组件的过滤器' ],
    [ 'css-loader', 'webpack的css过滤器' ],
    [ 'eslint-loader', 'webpack的eslint过滤器' ],
    [ 'file-loader', 'webpack的file过滤器' ],
    [ 'less-loader', 'webpack的less过滤器' ],
    [ 'sass-loader', 'webpack的sass过滤器' ],
    [ 'style-loader', 'webpack的style过滤器' ],
    [ 'thread-loader', 'webpack的子进程工作管理工具' ],
    [ 'url-loader', 'webpack的url过滤器' ],
    [ 'mini-css-extract-plugin', 'webpack的将CSS提取为独立的文件的插件' ],
    [ 'node-sass', '允许用户以极快的速度将scss文件本地编译为css' ],
    [ 'happypack', 'webpack的子进程分发插件' ],
    [ 'clean-webpack-plugin', '自动清除构建文件夹' ],
    [ 'hard-source-webpack-plugin', '为模块提供中间缓存步骤,加快速度' ],
    [ 'html-webpack-harddisk-plugin', '插件生成一个在 body 内使用 script 标签引入所有 webpack 打包文件的html5文件。' ],
    [ 'html-webpack-plugin', '插件的基本作用就是生成html文件' ],
    [ 'image-webpack-loader', '图片的压缩优化' ],
    [ 'optimize-css-assets-webpack-plugin', '用于优化或者压缩CSS资源' ],
    [ 'stylelint-webpack-plugin', 'webpack的stylelint运行插件' ],
    [ 'uglifyjs-webpack-plugin', '用于优化或者压缩CSS资源' ],
    [ '@vue/test-utils', 'Vue官方的单元测试实用工具库' ],
    [ 'vue-jest', 'Vue单元测试工具' ],
    [ 'jasmine-core', '单元测试工具' ],
    [ 'karma', '单元测试工具' ],
    [ 'karma-chrome-launcher', 'karma的chrome检查器' ],
    [ 'karma-jasmine', 'karma的jasmine插件' ],
    [ 'karma-sourcemap-loader', 'karma的javascript插件' ],
    [ 'karma-webpack', 'karma的webpack插件' ],
    [ 'vue-template-compiler', 'vue的将template语法转为render函数的插件' ],
    [ 'vue-clipboard2', 'vue剪切板功能插件' ],
    [ 'vue-color', 'vue拾色器插件' ],
    [ 'vuedraggable', 'vue的拖拽插件' ],
    [ 'vue-tel-input', 'Vue的国际电话格式的input插件' ],
    [ 'stylelint', 'css代码审查工具' ],
    [ 'stylelint-config-recommended-scss', '包含rule，code format的scss标准' ],
    [ 'stylelint-scss', 'stylelint的scss标准' ],
    [ 'eslint', 'JavaScript 语法规则和代码风格的检查工具' ],
    [ 'eslint-plugin-html', '支持类 html 文件（如 vue）的内联脚本检测' ],
    [ 'emoji-regex', 'emoji编码正则插件' ],
    [ 'jest', '测试框架' ],
    [ 'jquery', 'JavaScript框架' ],
    [ 'cross-env', '运行跨平台设置和使用环境变量的脚本' ],
    [ 'less', 'CSS 预处理语言' ],
    [ 'lodash', 'JavaScript 实用工具库' ],
    [ 'web-model', '前端api层管理工具,依靠superagent作为ajax工具' ],
    [ 'superagent', '客户端请求代理模块' ],
    [ 'echarts', '数据可视化库' ],
    [ 'vue-quill-editor', 'vue的quill插件' ],
    [ 'echarts-gl', '数据可视化库-webGL支持库' ],
    [ 'date-fns', '日期日历工具插件' ],
    [ 'tinycolor2', 'JavaScript中的颜色处理和转换库' ],
    [ 'html2canvas', 'html转canvas插件' ],
    [ 'jspdf', '用于生成各种用途的 PDF 文档的插件' ],
    [ 'smoothscroll-polyfill', '纯JS页面的平滑滚动插件' ],
    [ 'wangeditor', '基于javascript和css开发的 Web富文本编辑器' ],
    [ 'quill', '富文本编辑器插件' ],
    [ 'parchment', 'Quill的文档模型' ],
    [ 'lodash.throttle', '节流防抖插件' ],
    [ 'eslint-plugin-vue', 'Vue.js的官方ESLint插件' ],
    [ 'extract-text-webpack-plugin', '把css代码从js文件中抽离出来' ],
    [ 'js-cookie', '处理Cookie' ],
    [ 'moment', 'JavaScript 日期处理类库' ],
    [ 'vue-datepicker-simple', 'vue日期选择组件' ],
    [ '@vue/cli-plugin-babel', 'vue-cli的babel插件' ],
    [ '@vue/cli-plugin-eslint', 'vue-cli的eslint插件' ],
    [ '@vue/cli-service', 'vue-cli服务' ],
    [ 'sass', 'CSS扩展语言' ],
    [ 'babel-eslint', '对所有有效的babel代码进行lint处理' ],
    [ 'core-js', '@babel/polyfill的核心依赖' ],
    [ 'normalize.css', '浏览器CSS规范化' ],
    [ '@babel/core', 'Babel编译器核心' ],
    [ '@babel/plugin-proposal-class-properties', '转换静态类属性以及使用属性初始值设定项语法声明的属性' ],
    [ '@babel/plugin-proposal-decorators', '将类和对象装饰器编译为ES5' ],
    [ '@babel/plugin-proposal-export-namespace-from', '将导出名称空间编译到ES2015' ],
    [ '@babel/plugin-proposal-function-sent', '将function.sent的元属性编译为有效的ES2015代码' ],
    [ '@babel/plugin-proposal-json-strings', '用JS字符串转义U + 2028线分隔符和U + 2029参数分隔符' ],
    [ '@babel/plugin-proposal-numeric-separator', '从十进制，二进制，十六进制和八进制文字中删除数字分隔符' ],
    [ '@babel/plugin-proposal-throw-expressions', '在IIFE中包装引发表达式' ],
    [ '@babel/plugin-syntax-dynamic-import', '允许解析import（）' ],
    [ '@babel/plugin-syntax-import-meta', '允许解析import.meta' ],
    [ '@babel/plugin-syntax-jsx', '允许解析import.jsx' ],
    [ '@babel/plugin-transform-runtime', '外部化对助手和内置函数的引用，自动填充代码而不会污染全局变量' ],
    [ '@babel/polyfill', '在任何es2015+的环境中编写代码' ],
    [ '@babel/preset-env', '每个环境的Babel预设。' ],
    [ '@babel/runtime-corejs2', 'babel的带有core-js @ 2 polyfilling的模块化运行时帮助程序' ],
    [ 'babel-core', 'Babel编译器核心' ],
    [ 'babel-helper-vue-jsx-merge-props', 'Vue jsx传播的babel助手。' ],
    [ 'babel-plugin-transform-vue-jsx', 'Vue 2.0 JSX的Babel插件' ],
    [ 'postcss-cssnext', '先进的css写法' ],
    [ '@vue/eslint-config-standard', 'Vue CLI设置' ],
    [ 'bootstrap', '栅格布局' ],
    [ 'element-ui', 'element-ui组件' ],
    [ 'popper.js', 'rem计算插件' ],
    [ 'vue-awesome-swiper', '轮播图插件' ]

]
let packageDevdependencies = {}
if (NODE_FS.readdirSync('./').includes('package.json') && JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).devDependencies && JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).dependencies) {
    packageDevdependencies = Object.assign(JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).devDependencies, JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).dependencies)
} else if (NODE_FS.readdirSync('./').includes('package.json') && JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).devDependencies && !JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).dependencies) {
    packageDevdependencies = JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).devDependencies
} else if (NODE_FS.readdirSync('./').includes('package.json') && !JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).devDependencies && JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).dependencies) {
    packageDevdependencies = JSON.parse(NODE_FS.readFileSync('./package.json', 'utf-8')).dependencies
}

for (let i of Object.keys(packageDevdependencies)) {
    if (!PLUGIN_LIST.find(item => item[0] === i)) {
        console.info(i)
    }
}
